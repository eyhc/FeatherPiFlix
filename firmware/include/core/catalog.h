#ifndef CATALOG_H
#define CATALOG_H

#include <unordered_map>
#include <vector>
#include <string>
#include <optional>

#include "core/movie.h"

/**
 * \file catalog.h
 * \brief Defines catalog classes for storing and caching movies.
 * 
 * Provides three main catalog types:
 * - BasicCatalog: stores movies without caching.
 * - CachedCatalog: adds an LRU cache for synopses (not paged).
 * - PagedCachedCatalog: adds a paged LRU cache for synopses (10 movies per page).
 */

namespace core {

    /**
     * \brief Basic catalog storing a collection of movies.
     * 
     * Provides methods to add, remove, query and save movies. 
     * Uses \c FullMovie when constructed from a CSV file.
     */
    class BasicCatalog {
    public:
        /**
         * @brief Construct an empty catalog.
         */
        BasicCatalog();

        /**
         * \brief Construct a catalog from a CSV file.
         * \param filename Path to the CSV file.
         * \note This constructor loads \c FullMovie objects.
         *       Prefer using a file generated by the \c save methods
         */
        BasicCatalog(const std::string &filename);


        /**
         * \brief Save catalog contents to a CSV file.
         * \param filename Path to the output CSV file.
         */
        void save(const std::string &filename) const;

        /**
         * \brief Add a movie to the catalog.
         * 
         * If a movie with the same title already exists, it is not added.
         * 
         * \param m Movie to add (takes ownership).
         */
        virtual void add(std::unique_ptr<data::Movie> m);

        /**
         * @brief Remove a movie by title.
         * 
         * If any movie with this title exists, nothing happens.
         * 
         * @param title Title of the movie to remove.
         */
        virtual void remove(const std::string &title);

        /**
         * \brief Get the number of movies in the catalog.
         * \return Number of movies.
         */
        size_t size() const;

        /**
         * \brief Get a list of all movies in the catalog.
         * \return Vector of raw pointers to movies (non-owning).
         */
        std::vector<data::Movie *> all_movies();

        /**
         * \brief Get a movie by title.
         * 
         * \param title Title of the movie.
         * \return Pointer to the movie (non-owning), or nullptr if not found.
         */
        data::Movie *get_movie(const std::string &title);

    protected:
        /**
         * \brief Get the index of a movie by title.
         * 
         * \param title Title of the movie.
         * \return Index if found, empty optional otherwise.
         */
        std::optional<size_t> get_index(const std::string &title);

        /**
         * \brief Get a movie by index.
         * 
         * \param index Position in the catalog.
         * \return Pointer to the movie (non-owning).
         */
        data::Movie *get_movie(const size_t index);

    private:
        /// list of all movies in the catalog
        std::vector<std::unique_ptr<data::Movie>> _data;
    };

    
    /**
     * \brief Catalog with an  LRU cache for synopses (not paged).
     * 
     * Uses \c LazyMovie when constructed from a CSV file.  
     * Synopses are cached individually in memory with an LRU eviction policy.
     */
    class CachedCatalog: public BasicCatalog {
    public:
        /**
         * \brief Construct an empty cached catalog.
         * \param cache_size Maximum number of synopses in cache.
         */
        CachedCatalog(size_t cache_size);

        /**
         * \brief Construct a cached catalog from a CSV file.
         * 
         * \param filename Path to the CSV file.
         * \param cache_size Maximum number of synopses in cache.
         * \note This constructor loads \c LazyMovie objects.
         */
        CachedCatalog(const std::string &filename, size_t cache_size);

        /**
         * \brief Remove a movie and its cached synopsis.
         * \param title Title of the movie.
         */
        void remove(const std::string &title) override;

        /**
         * \brief Get a movie synopsis using cache.
         * 
         * \param title Title of the movie.
         * \return Synopsis if found, empty optional otherwise.
         */
        std::optional<std::string> get_synopsis_using_cache(
            const std::string& title);
        
        /**
         * \brief Check if a movie synopsis is cached.
         * 
         * \param title Title of the movie.
         * \return True if cached, false otherwise.
         */
        bool is_cached(const std::string& title);
    private:
        /// Map from title to cached synopsis.
        std::unordered_map<std::string, std::string> _cache;

        /// Order of cached items for LRU eviction.
        std::vector<std::string> _order;

        /// Maximum number of cached items.
        const size_t _cache_size;
    };


    /**
     * \brief Catalog with a paged LRU cache for synopses.
     * 
     * Synopses are cached page by page (10 movies per page).  
     * Uses \c LazyMovie when constructed from a CSV file.
     */
    class PagedCachedCatalog: public BasicCatalog {
    public:
        /**
         * \brief Construct an empty paged cached catalog.
         * \param cache_size Maximum number of pages in cache.
         */
        PagedCachedCatalog(size_t cache_size);

        /**
         * \brief Construct a paged cached catalog from a CSV file.
         * 
         * \param filename Path to the CSV file.
         * \param cache_size Maximum number of pages in cache.
         * \note This constructor loads \c LazyMovie objects.
         */
        PagedCachedCatalog(const std::string &filename, size_t cache_size);

        /**
         * \brief Get a movie synopsis using paged cache.
         * 
         * \param title Title of the movie.
         * \return Synopsis if found, empty optional otherwise.
         */
        std::optional<std::string> get_synopsis_using_cache(
            const std::string& title);

        /**
         * \brief Check if a movie synopsis is cached (page-based).
         * 
         * \param title Title of the movie.
         * \return True if cached, false otherwise.
         */
        bool is_cached(const std::string& title);

    private:
        /**
         * \brief Get a cached page by index.
         * 
         * \param index Page number.
         * \return Page map if cached, empty optional otherwise.
         */
        std::optional<std::unordered_map<std::string, std::string>> 
            get_page(size_t index);

        /**
         * \brief Load a page into the cache (with LRU eviction).
         * \param index Page number.
         */
        void load_page(size_t index);

        /// Filename for loading synopses.
        const std::string filename;

        /// Map of pages (page index -> {title -> synopsis}).
        std::unordered_map<size_t, 
            std::unordered_map<std::string, std::string>
        > _cache;


        /// Order of cached pages for LRU eviction.
        std::vector<size_t> _order;

        /// Maximum number of cached pages.
        const size_t _cache_size;
    };

} // namespace core

#endif // CATALOG_H
