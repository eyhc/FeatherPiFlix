#ifndef CATALOG_H
#define CATALOG_H

#include <unordered_map>
#include <vector>
#include <string>
#include <optional>
#include <functional>

#include "core/movie.h"

/**
 * \file catalog.h
 * \brief Defines catalog classes for storing and caching movies.
 * 
 * Provides three main catalog types:
 * - BasicCatalog: stores movies without caching.
 * - CachedCatalog: adds an LRU cache for synopses (not paged).
 * - PagedCachedCatalog: adds a paged LRU cache for synopses (10 movies per page).
 */
namespace core {

    /**
     * \brief A synopsis provider that uses a cache before delegating to a 
     *        base provider.
     *
     * When retrieving the synopsis, this class first attempts to use the cache
     * via the callback function. If not found, the base provider can be used.
     */
    class CachedSynopsisProvider: public data::SynopsisProvider {
    public:
        /**
         * \brief Construct a cached synopsis provider.
         * 
         * \param title Movie title.
         * \param base_provider Base provider to delegate storage/modifications.
         * \param get_synopsis_using_cache Callback function used to retrieve a
         *        synopsis from cache given a title.
         */
        CachedSynopsisProvider(
            const std::string &title,
            std::unique_ptr<data::SynopsisProvider> base_provider,
            std::function<std::optional<std::string>(const std::string&)> 
                get_synopsis_using_cache
        );

        /**
         * \brief Get the synopsis of the movie.
         * \return The cached synopsis if available, otherwise empty string.
         */
        std::string get_synopsis() const override;

        /**
         * \brief Update the synopsis of the movie.
         * \param synopsis New synopsis string.
         */
        void set_synopsis(const std::string &synopsis) override;

        /**
         * \brief Get the underlying base provider (non-owning).
         * \return Reference to the base synopsis provider.
         */
        std::reference_wrapper<data::SynopsisProvider> get_base_provider() const;

    private:
        std::string _title; ///< Movie title (used as cache key).
        /// Underlying provider for synopsis storage/retrieval.
        std::unique_ptr<data::SynopsisProvider> _base_provider;
        /// Function to retrieve synopsis through cache.
        std::function<std::optional<std::string>(const std::string&)> 
            _get_synopsis_using_cache;
    };


    // --------------------------------------------------------------------

    /**
     * \brief Basic catalog storing a collection of movies.
     * 
     * Provides methods to add, remove, query and save movies. 
     * Uses \c DirectSynopsisProvider when constructed from a CSV file.
     */
    class BasicCatalog {
    public:
        /**
         * \brief Construct an empty catalog.
         */
        BasicCatalog();

        /**
         * \brief Construct a catalog from a CSV file.
         * \param filename Path to the CSV file.
         *        Prefer using a file generated by the \c save methods
         * \throw std::runtime_error If the CSV file cannot be opened.
         * \throw std::runtime_error If the CSV file is invalid or if 
         *        one or more columns are missing.
         * \note  This constructor use \c DirectSynopsisProvider
         */
        BasicCatalog(const std::string &filename);

        /**
         * \brief Save catalog contents to a CSV file.
         * \param filename Path to the output CSV file.
         * \throw std::runtime_error If the CSV file cannot be opened.
         */
        void save(const std::string &filename) const;

        /**
         * \brief Add a movie to the catalog.
         * 
         * If a movie with the same title already exists, it is not added.
         * 
         * \param m Movie to add (takes ownership).
         */
        virtual void add(std::unique_ptr<data::Movie> m);

        /**
         * \brief Remove a movie by title.
         * 
         * If any movie with this title exists, nothing happens.
         * 
         * \param title Title of the movie to remove.
         */
        virtual void remove(const std::string &title);

        /**
         * \brief  Get the number of movies in the catalog.
         * \return Number of movies.
         */
        size_t size() const;

        /**
         * \brief  Get a list of all movies in the catalog.
         * \return Vector of raw references to movies (non-owning).
         */
        std::vector<data::movie_ref> all_movies();

        /**
         * \brief  Get a movie by title.
         * \param  title Title of the movie.
         * \return Reference to the movie (non-owning), or empty optional if 
         *         not found.
         */
        std::optional<data::movie_ref> get_movie(const std::string &title) const;

    protected:
        /**
         * \brief  Get the index of a movie by title.
         * \param  title Title of the movie.
         * \return Index if found, empty optional otherwise.
         */
        std::optional<size_t> get_index(const std::string &title) const;

        /**
         * \brief  Get a movie by index.
         * \param  index Position in the catalog.
         * \return Reference to the movie (non-owning).
         */
        std::optional<data::movie_ref> get_movie(const size_t index) const;

    private:
        /// list of all movies in the catalog
        std::vector<std::unique_ptr<data::Movie>> _data;
    };


    // --------------------------------------------------------------------
    
    /**
     * \brief Catalog with an  LRU cache for synopses (not paged).
     * 
     * Uses \c CSVFileSynopsisProvider when constructed from a CSV file.  
     * Synopses are cached individually in memory with an LRU eviction policy.
     */
    class CachedCatalog: public BasicCatalog {
    public:
        /**
         * \brief Construct an empty cached catalog.
         * \param cache_size Maximum number of synopses in cache.
         */
        CachedCatalog(size_t cache_size);

        /**
         * \brief Construct a cached catalog from a CSV file.
         * 
         * \param filename Path to the CSV file.
         * \param cache_size Maximum number of synopses in cache.
         * 
         * \throw std::runtime_error If the CSV file cannot be opened.
         * \throw std::runtime_error If the CSV file is invalid or if 
         *        one or more columns are missing.
         * 
         * \note This constructor use \c CSVFileSynopsisProvider
         */
        CachedCatalog(const std::string &filename, size_t cache_size);

        /**
         * \brief Add a movie to the catalog.
         * \param m Movie to add.
         */
        void add(std::unique_ptr<data::Movie> m) override;

        /**
         * \brief Remove a movie and its cached synopsis.
         * \param title Title of the movie.
         */
        void remove(const std::string &title) override;
        
        /**
         * \brief  Check if a movie synopsis is cached.
         * \param  title Title of the movie.
         * \return True if cached, false otherwise.
         */
        bool is_cached(const std::string &title) const;

    protected:
        /**
         * \brief  Get a movie synopsis using cache.
         * \param  title Title of the movie.
         * \return Synopsis if found from cache, empty optional otherwise.
         * \throws std::runtime_error If an error occurs during synopsis loading.
         */
        std::optional<std::string> get_synopsis_using_cache(
            const std::string &title);

    private:
        /// Map from title to cached synopsis.
        std::unordered_map<std::string, std::string> _cache;

        /// Order of cached items for LRU eviction.
        std::vector<std::string> _order;

        /// Maximum number of cached items.
        const size_t _cache_size;
    };


    // --------------------------------------------------------------------

    /**
     * \brief Catalog with a paged LRU cache for synopses.
     * 
     * Synopses are cached page by page (10 movies per page).  
     * Uses \c CSVFileSynopsisProvider when constructed from a CSV file.
     */
    class PagedCachedCatalog: public BasicCatalog {
    public:
        /**
         * \brief Construct a paged cached catalog from a CSV file.
         * 
         * \param filename Path to the CSV file.
         * \param cache_size Maximum number of pages in cache.
         * 
         * \throw std::runtime_error If the CSV file cannot be opened.
         * \throw std::runtime_error If the CSV file is invalid or if 
         *        one or more columns are missing.
         * 
         * \note  This constructor uses \c CSVFileSynopsisProvider as default 
         *        synopsis provider.
         */
        PagedCachedCatalog(const std::string &filename, size_t cache_size);

        /**
         * \brief Add a movie to the catalog.
         * \param m Movie to add.
         */
        void add(std::unique_ptr<data::Movie> m) override;

        /**
         * \brief  Check if a movie synopsis is cached (page-based).
         * \param  title Title of the movie.
         * \return True if cached, false otherwise.
         */
        bool is_cached(const std::string& title) const;

    protected:
        /**
         * \brief  Get a movie synopsis using cache.
         * 
         * \param  title Title of the movie.
         * \return Synopsis if found from cache, empty optional otherwise.
         * 
         * \throws std::runtime_error If an error occurs during synopsis loading.
         */
        std::optional<std::string> get_synopsis_using_cache(
            const std::string& title);

    private:
        /**
         * \brief  Get a cached page by index.
         * 
         * \param  index Page number.
         * \return Page map if cached, empty optional otherwise.
         * 
         * \note   update the LRU order
         */
        std::optional<std::unordered_map<std::string, std::string>> 
            get_page(size_t index);

        /**
         * \brief  Load a page into the cache (with LRU eviction).
         * \param  index Page number.
         * \throws std::runtime_error If an error occurs while reading the 
         *         CSV file.
         */
        void load_page(size_t index);

        /// Filename for loading synopses. (cannot be empty !)
        const std::string _filename;

        /// Map of pages (page index -> {title -> synopsis}).
        std::unordered_map<size_t, 
            std::unordered_map<std::string, std::string>
        > _cache;

        /// Order of cached pages for LRU eviction.
        std::vector<size_t> _order;

        /// Maximum number of cached pages.
        const size_t _cache_size;
    };

} // namespace core

#endif // CATALOG_H
