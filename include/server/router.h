#ifndef ROUTER_H
#define ROUTER_H

#include <string>
#include <functional>
#include <optional>
#include <map>
#include <regex>
#include "microhttpd.h"

/**
 * \file router.h
 * \brief Defines a minimal HTTP router for handling requests with regex-based routes.
 */

namespace server::routing {

    // --- Request / Response ---

    /**
     * \brief Represents an HTTP request.
     */
    struct Request {
        std::string method;           ///< HTTP method (e.g. GET, POST, DELETE).
        std::string url;              ///< Requested URL.
        struct MHD_Connection* conn;  ///< libmicrohttpd connection pointer.
    };

    /**
     * \brief Represents an HTTP response.
     */
    struct Response {
        MHD_Response *response;       ///< libmicrohttpd response pointer.
        int status = MHD_HTTP_OK;     ///< HTTP status code (default: 200 OK).
    };

    // --- Type handler ---

    /**
     * \brief Type alias for a route handler function.
     *
     * A handler takes a \c Request and returns a \c Response.
     */
    using Handler = std::function<Response(const Request &)>;

    // --- Route ---

    /**
     * \brief Represents a single route entry.
     */
    struct Route {
        std::regex pattern;   ///< Regex pattern to match the request URL.
        std::string method;   ///< HTTP method for this route (e.g., "GET").
        Handler handler;      ///< Handler function to process the request.
    };

    /**
     * \brief Simple router for dispatching HTTP requests.
     *
     * Routes are registered with an HTTP method and a regex pattern.
     * Incoming requests are matched against the list of routes in order.
     */
    class Router {
    public:
        /**
         * \brief Construct an empty router.
         */
        Router() = default;

        /**
         * \brief Add a route to the router.
         *
         * \param method HTTP method (e.g., "GET", "POST").
         * \param regex_path Regular expression to match the URL path.
         * \param h Handler function to execute when a match occurs.
         */
        void add_route(
            const std::string &method,
            const std::regex &regex_path,
            Handler h
        );

        /**
         * \brief Find a matching route for a request.
         *
         * \param method HTTP method of the request.
         * \param url URL of the request.
         * \return The matched route, or empty optional if no match is found.
         */
        std::optional<Route> get_route(
            const std::string &method,
            const std::string &url
        );

        /**
         * \brief Dispatch a request to the appropriate route handler.
         *
         * \param req The HTTP request.
         * \return A response generated by the matching route handler,
         *         or a 404 response if no route matches.
         */
        Response dispatch(const Request &req);

    private:
        std::vector<Route> _routes; ///< List of registered routes.
    };

} // namespace server::routing

#endif
